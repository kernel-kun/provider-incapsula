/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AssetAssociationInitParameters struct {

	// The account ID of the asset. Set this field if the asset's account is different than the account used in the credentials. For example, when setting a sub account’s asset association from the parent account.
	// The Asset's Account ID
	AccountID *float64 `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// The Asset ID for the asset association. Only type of asset supported at the moment is site.
	// The Asset ID for the asset association. Only type of asset supported at the moment is site.
	// +crossplane:generate:reference:type=github.com/kernel-kun/provider-incapsula/apis/site/v1alpha1.Site
	AssetID *string `json:"assetId,omitempty" tf:"asset_id,omitempty"`

	// Reference to a Site in site to populate assetId.
	// +kubebuilder:validation:Optional
	AssetIDRef *v1.Reference `json:"assetIdRef,omitempty" tf:"-"`

	// Selector for a Site in site to populate assetId.
	// +kubebuilder:validation:Optional
	AssetIDSelector *v1.Selector `json:"assetIdSelector,omitempty" tf:"-"`

	// The Policy type for the asset association. Only value at the moment is WEBSITE.
	// The Policy type for the asset association. Only value at the moment is `WEBSITE`.
	AssetType *string `json:"assetType,omitempty" tf:"asset_type,omitempty"`

	// The Policy ID for the asset association.
	// The Policy ID for the asset association.
	// +crossplane:generate:reference:type=Policy
	PolicyID *string `json:"policyId,omitempty" tf:"policy_id,omitempty"`

	// Reference to a Policy to populate policyId.
	// +kubebuilder:validation:Optional
	PolicyIDRef *v1.Reference `json:"policyIdRef,omitempty" tf:"-"`

	// Selector for a Policy to populate policyId.
	// +kubebuilder:validation:Optional
	PolicyIDSelector *v1.Selector `json:"policyIdSelector,omitempty" tf:"-"`
}

type AssetAssociationObservation struct {

	// The account ID of the asset. Set this field if the asset's account is different than the account used in the credentials. For example, when setting a sub account’s asset association from the parent account.
	// The Asset's Account ID
	AccountID *float64 `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// The Asset ID for the asset association. Only type of asset supported at the moment is site.
	// The Asset ID for the asset association. Only type of asset supported at the moment is site.
	AssetID *string `json:"assetId,omitempty" tf:"asset_id,omitempty"`

	// The Policy type for the asset association. Only value at the moment is WEBSITE.
	// The Policy type for the asset association. Only value at the moment is `WEBSITE`.
	AssetType *string `json:"assetType,omitempty" tf:"asset_type,omitempty"`

	// Unique identifier in the API for the policy asset association.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The Policy ID for the asset association.
	// The Policy ID for the asset association.
	PolicyID *string `json:"policyId,omitempty" tf:"policy_id,omitempty"`
}

type AssetAssociationParameters struct {

	// The account ID of the asset. Set this field if the asset's account is different than the account used in the credentials. For example, when setting a sub account’s asset association from the parent account.
	// The Asset's Account ID
	// +kubebuilder:validation:Optional
	AccountID *float64 `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// The Asset ID for the asset association. Only type of asset supported at the moment is site.
	// The Asset ID for the asset association. Only type of asset supported at the moment is site.
	// +crossplane:generate:reference:type=github.com/kernel-kun/provider-incapsula/apis/site/v1alpha1.Site
	// +kubebuilder:validation:Optional
	AssetID *string `json:"assetId,omitempty" tf:"asset_id,omitempty"`

	// Reference to a Site in site to populate assetId.
	// +kubebuilder:validation:Optional
	AssetIDRef *v1.Reference `json:"assetIdRef,omitempty" tf:"-"`

	// Selector for a Site in site to populate assetId.
	// +kubebuilder:validation:Optional
	AssetIDSelector *v1.Selector `json:"assetIdSelector,omitempty" tf:"-"`

	// The Policy type for the asset association. Only value at the moment is WEBSITE.
	// The Policy type for the asset association. Only value at the moment is `WEBSITE`.
	// +kubebuilder:validation:Optional
	AssetType *string `json:"assetType,omitempty" tf:"asset_type,omitempty"`

	// The Policy ID for the asset association.
	// The Policy ID for the asset association.
	// +crossplane:generate:reference:type=Policy
	// +kubebuilder:validation:Optional
	PolicyID *string `json:"policyId,omitempty" tf:"policy_id,omitempty"`

	// Reference to a Policy to populate policyId.
	// +kubebuilder:validation:Optional
	PolicyIDRef *v1.Reference `json:"policyIdRef,omitempty" tf:"-"`

	// Selector for a Policy to populate policyId.
	// +kubebuilder:validation:Optional
	PolicyIDSelector *v1.Selector `json:"policyIdSelector,omitempty" tf:"-"`
}

// AssetAssociationSpec defines the desired state of AssetAssociation
type AssetAssociationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AssetAssociationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AssetAssociationInitParameters `json:"initProvider,omitempty"`
}

// AssetAssociationStatus defines the observed state of AssetAssociation.
type AssetAssociationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AssetAssociationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// AssetAssociation is the Schema for the AssetAssociations API. Provides a Incapsula Policy Asset Association resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,incapsula}
type AssetAssociation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.assetType) || (has(self.initProvider) && has(self.initProvider.assetType))",message="spec.forProvider.assetType is a required parameter"
	Spec   AssetAssociationSpec   `json:"spec"`
	Status AssetAssociationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AssetAssociationList contains a list of AssetAssociations
type AssetAssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AssetAssociation `json:"items"`
}

// Repository type metadata.
var (
	AssetAssociation_Kind             = "AssetAssociation"
	AssetAssociation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AssetAssociation_Kind}.String()
	AssetAssociation_KindAPIVersion   = AssetAssociation_Kind + "." + CRDGroupVersion.String()
	AssetAssociation_GroupVersionKind = CRDGroupVersion.WithKind(AssetAssociation_Kind)
)

func init() {
	SchemeBuilder.Register(&AssetAssociation{}, &AssetAssociationList{})
}
