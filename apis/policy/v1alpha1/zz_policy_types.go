/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PolicyInitParameters struct {

	// Account ID of the policy.
	// The Account ID of the policy.
	AccountID *float64 `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// The policy description.
	// The policy description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Enables the policy.
	// Enables the policy.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The policy name.
	// The policy name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The policy settings as JSON string. See Imperva documentation for help with constructing a correct value.
	// Policy_settings internal values:
	// policySettingType: IP, GEO, URL
	// settingsAction: BLOCK, ALLOW, ALERT, BLOCK_USER, BLOCK_IP, IGNORE
	// policySettings.data.url.pattern: CONTAINS, EQUALS, NOT_CONTAINS, NOT_EQUALS, NOT_PREFIX, NOT_SUFFIX, PREFIX, SUFFIX
	// exceptionType: GEO, IP, URL, CLIENT_ID, SITE_ID
	// The policy settings as JSON string. See Imperva documentation for help with constructing a correct value.
	PolicySettings *string `json:"policySettings,omitempty" tf:"policy_settings,omitempty"`

	// The policy type. Possible values: ACL, WHITELIST, WAF_RULES.  Note: For (policy_type=WAF_RULES), all 4 setting types (policySettingType) are mandatory (REMOTE_FILE_INCLUSION, ILLEGAL_RESOURCE_ACCESS, CROSS_SITE_SCRIPTING, SQL_INJECTION).
	// The policy type. Possible values: ACL, WHITELIST, WAF_RULES
	PolicyType *string `json:"policyType,omitempty" tf:"policy_type,omitempty"`
}

type PolicyObservation struct {

	// Account ID of the policy.
	// The Account ID of the policy.
	AccountID *float64 `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// The policy description.
	// The policy description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Enables the policy.
	// Enables the policy.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Unique identifier in the API for the policy.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The policy name.
	// The policy name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The policy settings as JSON string. See Imperva documentation for help with constructing a correct value.
	// Policy_settings internal values:
	// policySettingType: IP, GEO, URL
	// settingsAction: BLOCK, ALLOW, ALERT, BLOCK_USER, BLOCK_IP, IGNORE
	// policySettings.data.url.pattern: CONTAINS, EQUALS, NOT_CONTAINS, NOT_EQUALS, NOT_PREFIX, NOT_SUFFIX, PREFIX, SUFFIX
	// exceptionType: GEO, IP, URL, CLIENT_ID, SITE_ID
	// The policy settings as JSON string. See Imperva documentation for help with constructing a correct value.
	PolicySettings *string `json:"policySettings,omitempty" tf:"policy_settings,omitempty"`

	// The policy type. Possible values: ACL, WHITELIST, WAF_RULES.  Note: For (policy_type=WAF_RULES), all 4 setting types (policySettingType) are mandatory (REMOTE_FILE_INCLUSION, ILLEGAL_RESOURCE_ACCESS, CROSS_SITE_SCRIPTING, SQL_INJECTION).
	// The policy type. Possible values: ACL, WHITELIST, WAF_RULES
	PolicyType *string `json:"policyType,omitempty" tf:"policy_type,omitempty"`
}

type PolicyParameters struct {

	// Account ID of the policy.
	// The Account ID of the policy.
	// +kubebuilder:validation:Optional
	AccountID *float64 `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// The policy description.
	// The policy description.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Enables the policy.
	// Enables the policy.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The policy name.
	// The policy name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The policy settings as JSON string. See Imperva documentation for help with constructing a correct value.
	// Policy_settings internal values:
	// policySettingType: IP, GEO, URL
	// settingsAction: BLOCK, ALLOW, ALERT, BLOCK_USER, BLOCK_IP, IGNORE
	// policySettings.data.url.pattern: CONTAINS, EQUALS, NOT_CONTAINS, NOT_EQUALS, NOT_PREFIX, NOT_SUFFIX, PREFIX, SUFFIX
	// exceptionType: GEO, IP, URL, CLIENT_ID, SITE_ID
	// The policy settings as JSON string. See Imperva documentation for help with constructing a correct value.
	// +kubebuilder:validation:Optional
	PolicySettings *string `json:"policySettings,omitempty" tf:"policy_settings,omitempty"`

	// The policy type. Possible values: ACL, WHITELIST, WAF_RULES.  Note: For (policy_type=WAF_RULES), all 4 setting types (policySettingType) are mandatory (REMOTE_FILE_INCLUSION, ILLEGAL_RESOURCE_ACCESS, CROSS_SITE_SCRIPTING, SQL_INJECTION).
	// The policy type. Possible values: ACL, WHITELIST, WAF_RULES
	// +kubebuilder:validation:Optional
	PolicyType *string `json:"policyType,omitempty" tf:"policy_type,omitempty"`
}

// PolicySpec defines the desired state of Policy
type PolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PolicyInitParameters `json:"initProvider,omitempty"`
}

// PolicyStatus defines the observed state of Policy.
type PolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Policy is the Schema for the Policys API. Provides a Incapsula Policy resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,incapsula}
type Policy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enabled) || (has(self.initProvider) && has(self.initProvider.enabled))",message="spec.forProvider.enabled is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.policySettings) || (has(self.initProvider) && has(self.initProvider.policySettings))",message="spec.forProvider.policySettings is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.policyType) || (has(self.initProvider) && has(self.initProvider.policyType))",message="spec.forProvider.policyType is a required parameter"
	Spec   PolicySpec   `json:"spec"`
	Status PolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyList contains a list of Policys
type PolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Policy `json:"items"`
}

// Repository type metadata.
var (
	Policy_Kind             = "Policy"
	Policy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Policy_Kind}.String()
	Policy_KindAPIVersion   = Policy_Kind + "." + CRDGroupVersion.String()
	Policy_GroupVersionKind = CRDGroupVersion.WithKind(Policy_Kind)
)

func init() {
	SchemeBuilder.Register(&Policy{}, &PolicyList{})
}
